{"version":3,"sources":["types/game-status.enum.ts","types/level.enum.ts","components/board.class.ts","components/fields/NumberField.tsx","components/fields/UntouchedField.tsx","components/fields/MineField.tsx","components/fields/FlagField.tsx","components/fields/Field.tsx","components/LevelChooser.tsx","components/StatsDisplay.tsx","components/Minesweeper.tsx","App.js","serviceWorker.js","index.js"],"names":["GameStatus","Level","Board","numberOfColumns","numberOfRows","numberOfMines","_fields","_minePositions","_numberOfFlags","_numberOfRevealedFields","this","initializeBlankFields","rollMinePositions","distributeMines","calculateNumberOfMineNeighbors","field","boardField","getFieldByPosition","position","isFlagged","numberOfFlags","isRevealed","forEach","revealField","x","y","find","console","warn","centerX","centerY","centerIsNotAtTopBoundary","centerIsNotAtLeftBoundary","centerIsNotAtRightBoundary","centerIsNotAtBottomBoundary","filter","potentialNeighborField","isTopLeft","isTop","isTopRight","isLeft","isRight","isBottomLeft","isBottom","isBottomRight","i","numberOfFields","push","hasMine","Math","floor","numberOfMineNeighbors","randomColumn","random","randomRow","some","pos","length","minePosition","undefined","getNumberOfMineNeighborsForField","getNeighborsOfField","neighbor","NumberField","props","className","neighborCount","UntouchedField","MineField","role","aria-label","FlagField","Field","handleReveal","onReveal","handleMultiReveal","onMultiReveal","handleFlag","event","preventDefault","onFlag","revealedField","unrevealedField","render","onClick","onContextMenu","onDoubleClick","React","LevelChooser","radioOptions","name","value","Easy","Medium","Hard","handleChangeSelection","setState","currentlySelectedLevel","target","state","ButtonGroup","toggle","map","radio","idx","ToggleButton","key","type","variant","checked","onFocus","Button","onStartNewGameClick","StatsDisplay","smiley","gameStatus","Playing","Won","Lost","board","Badge","numberOfMinesLeft","numberOfFieldsToReveal","Minesweeper","startNewGame","level","revealAllFields","revealFieldsRecursively","rerenderBoard","neighbors","numberOfFlaggedNeighbors","log","toggleFlagForField","boardCssClasses","allFields","index","howToUse","App","href","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yNAAYA,ECAAC,E,2FDAAD,K,kBAAAA,E,UAAAA,E,aAAAA,M,cCAAC,K,YAAAA,E,gBAAAA,E,aAAAA,M,KCGL,IAAMC,EAAb,WAOI,WACoBC,EACAC,GAEjB,IADiBC,EAClB,uDAD0C,EAC1C,yBAHkBF,kBAGlB,KAFkBC,eAElB,KADkBC,gBAClB,KAVeC,aAUf,OATeC,oBASf,OAPMC,eAAiB,EAOvB,KANMC,wBAA0B,EAO9BC,KAAKJ,QAAU,GACfI,KAAKH,eAAiB,GACtBG,KAAKC,wBACLD,KAAKE,oBACLF,KAAKG,kBACLH,KAAKI,iCAjBb,+DA4CuBC,GACf,IAAMC,EAAaN,KAAKO,mBAAmBF,EAAMG,UAC5CF,IAELA,EAAWG,WAAaH,EAAWG,UACnCT,KAAKF,eAAiBQ,EAAWG,UAC3BT,KAAKU,cAAgB,EACrBV,KAAKU,cAAgB,KAnDnC,kCAsDgBL,GACR,IAAMC,EAAaN,KAAKO,mBAAmBF,EAAMG,UAC7CF,IAAYA,EAAWK,YAAa,GACxCX,KAAKD,4BAzDb,wCA4D6B,IAAD,OACpBC,KAAKJ,QAAQgB,SAAQ,SAACP,GAClB,EAAKQ,YAAYR,QA9D7B,yCAkEuBG,GAOf,KALIA,EAASM,GAAKd,KAAKP,iBACnBe,EAASM,EAAI,GACbN,EAASO,GAAKf,KAAKN,cACnBc,EAASO,EAAI,GAOjB,OAAOf,KAAKJ,QAAQoB,MAChB,SAACX,GAAD,OAAWA,EAAMG,SAASM,IAAMN,EAASM,GAAKT,EAAMG,SAASO,IAAMP,EAASO,KAL5EE,QAAQC,KAAK,0CAA2CV,KA1EpE,0CAmFwBH,GAChB,IAAMc,EAAUd,EAAMG,SAASM,EACzBM,EAAUf,EAAMG,SAASO,EACzBM,EAA2BD,EAAU,GAAK,EAC1CE,EAA4BH,EAAU,GAAK,EAC3CI,EAA6BJ,EAAU,EAAInB,KAAKP,gBAChD+B,EAA8BJ,EAAU,EAAIpB,KAAKN,aAEvD,OAAOM,KAAKJ,QAAQ6B,QAAO,SAACC,GACxB,IAAMZ,EAAIY,EAAuBlB,SAASM,EACpCC,EAAIW,EAAuBlB,SAASO,EACtCY,GAAY,EACZC,GAAQ,EACRC,GAAa,EACbC,GAAS,EACTC,GAAU,EACVC,GAAe,EACfC,GAAW,EACXC,GAAgB,EA2BpB,OAzBIb,GAA4BC,IAC5BK,EAAYb,IAAMK,EAAU,GAAKJ,IAAMK,EAAU,GAEjDC,IACAO,EAAQd,IAAMK,GAAWJ,IAAMK,EAAU,GAEzCC,GAA4BE,IAC5BM,EAAaf,IAAMK,EAAU,GAAKJ,IAAMK,EAAU,GAElDE,IACAQ,EAAShB,IAAMK,EAAU,GAAKJ,IAAMK,GAEpCG,IACAQ,EAAUjB,IAAMK,EAAU,GAAKJ,IAAMK,GAErCI,GAA+BF,IAC/BU,EAAelB,IAAMK,EAAU,GAAKJ,IAAMK,EAAU,GAEpDI,IACAS,EAAWnB,IAAMK,GAAWJ,IAAMK,EAAU,GAE5CI,GAA+BD,IAC/BW,EAAgBpB,IAAMK,EAAU,GAAKJ,IAAMK,EAAU,GAIrDO,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,OAxIhB,8CA8IQ,IAAK,IAAIC,EAAI,EAAGA,EAAInC,KAAKoC,eAAgBD,IACrCnC,KAAKJ,QAAQyC,KAAK,CACdC,SAAS,EACT3B,YAAY,EACZF,WAAW,EACXD,SAAU,CACNM,EAAGqB,EAAInC,KAAKP,gBACZsB,EAAGwB,KAAKC,MAAML,EAAInC,KAAKP,kBAE3BgD,sBAAuB,MAvJvC,0CA6JQ,IADyB,IAAD,oBAEpB,IAAMC,EAAeH,KAAKC,MAAMD,KAAKI,SAAW,EAAKlD,iBAC/CmD,EAAYL,KAAKC,MAAMD,KAAKI,SAAW,EAAKjD,cAC5Cc,EAAqB,CACvBM,EAAG4B,EACH3B,EAAG6B,GAEuB,EAAK/C,eAAegD,MAC9C,SAACC,GAAD,OAASA,EAAIhC,IAAM4B,GAAgBI,EAAI/B,IAAM6B,MAI7C,EAAK/C,eAAewC,KAAK7B,IAZ1BR,KAAKH,eAAekD,OAAS/C,KAAKL,eAAgB,MA7JjE,wCA8K+B,IAAD,OACtBK,KAAKH,eAAee,SAAQ,SAACoC,GACzB,IAAM3C,EAAQ,EAAKE,mBAAmByC,QAExBC,IAAV5C,EACAA,EAAMiC,SAAU,EAEhBrB,QAAQC,KAAK,kDArL7B,uDA0L8C,IAAD,OACrClB,KAAKJ,QAAQgB,SAAQ,SAACP,GAClBA,EAAMoC,sBAAwB,EAAKS,iCAAiC7C,QA5LhF,uDAgM6CA,GAGrC,OAFkBL,KAAKmD,oBAAoB9C,GACPoB,QAAO,SAAC2B,GAAD,OAAcA,EAASd,WACzCS,SAnMjC,qCAqBQ,OAAO/C,KAAKN,aAAeM,KAAKP,kBArBxC,6CAyBQ,OAAOO,KAAKoC,eAAiBpC,KAAKL,cAAgBK,KAAKD,0BAzB/D,oCA6BQ,OAAOC,KAAKF,iBA7BpB,wCAiCQ,OAAOE,KAAKL,cAAgBK,KAAKF,iBAjCzC,gCAqCQ,OAAOE,KAAKJ,UArCpB,uCAyCQ,OAAOI,KAAKH,mBAzCpB,KCGawD,EAAc,SAACC,GAAD,OACvB,uBAAKC,UAAS,kCAA6BD,EAAME,gBAC7C,4BAAOF,EAAME,iBCNRC,EAAiB,WAC1B,OAAO,uBAAKF,UAAU,eCDbG,EAAY,kBACrB,uBAAKH,UAAU,qBACX,wBAAMI,KAAK,MAAMC,aAAW,QAA5B,kBCFKC,EAAY,WACrB,OACI,uBAAKN,UAAU,WACX,wBAAMI,KAAK,MAAMC,aAAW,QAA5B,kBCUCE,EAAb,4MACIC,aAAe,WAAO,IAAD,EACW,EAAKT,MAAzBjD,EADS,EACTA,MAAO2D,EADE,EACFA,SACV3D,EAAMM,YAAeN,EAAMI,WAAWuD,EAAS3D,IAH5D,EAMI4D,kBAAoB,WAAO,IAAD,EACW,EAAKX,MAA9BjD,EADc,EACdA,MAAO6D,EADO,EACPA,cACX7D,EAAMM,YAAYuD,EAAc7D,IAR5C,EAWI8D,WAAa,SAACC,GACVA,EAAMC,iBADsD,MAElC,EAAKf,MAAvBjD,EAFoD,EAEpDA,MAAOiE,EAF6C,EAE7CA,OACVjE,EAAMM,YAAY2D,EAAOjE,IAdtC,EAiBIkE,cAAgB,kBACZ,EAAKjB,MAAMjD,MAAMiC,QACb,gBAAC,EAAD,MAEA,gBAAC,EAAD,CAAakB,cAAe,EAAKF,MAAMjD,MAAMoC,yBArBzD,EAwBI+B,gBAAkB,kBACd,EAAKlB,MAAMjD,MAAMI,UAAY,gBAAC,EAAD,MAAgB,gBAAC,EAAD,OAzBrD,EA2BIJ,MAAQ,kBACJ,EAAKiD,MAAMjD,MAAMM,WAAa,EAAK4D,gBAAkB,EAAKC,mBA5BlE,EA8BIC,OAAS,kBACL,uBACIlB,UAAU,QACVmB,QAAS,EAAKX,aACdY,cAAe,EAAKR,WACpBS,cAAe,EAAKX,mBAEnB,EAAK5D,UArClB,YAA2BwE,a,wBCEdC,EAAb,kDAOI,WAAYxB,GAAa,IAAD,8BACpB,cAAMA,IAPDyB,aAAmC,CACxC,CAAEC,KAAM,OAAQC,MAAO1F,EAAM2F,MAC7B,CAAEF,KAAM,SAAUC,MAAO1F,EAAM4F,QAC/B,CAAEH,KAAM,OAAQC,MAAO1F,EAAM6F,OAGT,EAOxBC,sBAAwB,SAACjB,GACrB,EAAKkB,SAAS,CAAEC,uBAAwBnB,EAAMoB,OAAOP,SANrD,EAAKQ,MAAQ,CACTF,uBAAwBhG,EAAM2F,MAHd,EAP5B,qDAkBc,IAAD,OACL,OACI,uBAAK3B,UAAU,iBACX,gBAACmC,EAAA,EAAD,CAAaC,QAAM,GACd3F,KAAK+E,aAAaa,KAAI,SAACC,EAAyBC,GAA1B,OACnB,gBAACC,EAAA,EAAD,CACIC,IAAKF,EACLG,KAAK,QACLC,QAAQ,YACRlB,KAAK,QACLC,MAAOY,EAAMZ,MACbkB,QAASN,EAAMZ,QAAU,EAAKQ,MAAMF,uBACpCa,QAAS,EAAKf,uBAEbQ,EAAMb,UAKnB,gBAACqB,EAAA,EAAD,CACIH,QAAQ,UACRxB,QAAS,kBACL,EAAKpB,MAAMgD,oBAAoB,EAAKb,MAAMF,0BAHlD,wBArChB,GAAkCV,a,QCPrB0B,EAAb,4MACIC,OAAS,WACL,OAAQ,EAAKlD,MAAMmD,YACf,KAAKnH,EAAWoH,QACZ,MAAO,eACX,KAAKpH,EAAWqH,IACZ,MAAO,eACX,KAAKrH,EAAWsH,KACZ,MAAO,iBARvB,uDAWc,IAAD,EACyB5G,KAAKsD,MAA3BuD,EADH,EACGA,MAAOJ,EADV,EACUA,WACf,OACI,gCACI,uBAAKlD,UAAU,UACX,wBAAMI,KAAK,MAAMC,aAAW,UACvB5D,KAAKwG,WAGd,uBAAKjD,UAAU,iBACX,gBAACuD,EAAA,EAAD,CAAOvD,UAAU,YAAY2C,QAAQ,UACjC,wBAAMvC,KAAK,MAAMC,aAAW,QAA5B,gBADJ,OAKI,4BACK6C,IAAenH,EAAWqH,IAAM,EAAIE,EAAME,oBAGnD,gBAACD,EAAA,EAAD,CAAOvD,UAAU,YAAY2C,QAAQ,aACjC,wBAAMvC,KAAK,MAAMC,aAAW,UAA5B,gBADJ,OAKI,4BACK6C,IAAenH,EAAWoH,QACrBG,EAAMG,uBACN,IAGd,gBAACF,EAAA,EAAD,CAAOvD,UAAU,OAAO2C,QAAQ,aAC5B,wBAAMvC,KAAK,MAAMC,aAAW,QAA5B,gBADJ,OAIU,4BAAOiD,EAAMnG,sBA7C3C,GAAkCmE,aCQrBoC,EAAb,kDACI,WAAY3D,GAAa,IAAD,8BACpB,cAAMA,IAQV4D,aAAe,SAACC,GACZ,OAAQA,GACJ,KAAK5H,EAAM2F,KACP,EAAKI,SAAS,CACVuB,MAAO,IAAIrH,EAAM,EAAG,EAAG,MAE3B,MACJ,KAAKD,EAAM4F,OACP,EAAKG,SAAS,CACVuB,MAAO,IAAIrH,EAAM,GAAI,GAAI,MAE7B,MACJ,KAAKD,EAAM6F,KACP,EAAKE,SAAS,CACVuB,MAAO,IAAIrH,EAAM,GAAI,GAAI,OAMrC,EAAK8F,SAAS,CACV6B,MAAOA,EACPV,WAAYnH,EAAWoH,WA/BP,EAmCxB3C,aAAe,SAAC1D,GAAuB,IAC3BwG,EAAU,EAAKpB,MAAfoB,MAEJxG,EAAMiC,SACNuE,EAAMO,kBACN,EAAK9B,SAAS,CAAEmB,WAAYnH,EAAWsH,QAEvC,EAAKS,wBAAwBhH,GAGI,IAAjCwG,EAAMG,yBACNH,EAAMO,kBACN,EAAK9B,SAAS,CAAEmB,WAAYnH,EAAWqH,OAE3C,EAAKW,iBAjDe,EAoDxBrD,kBAAoB,SAAC5D,GACjB,IAAMkH,EAAY,EAAK9B,MAAMoB,MAAM1D,oBAAoB9C,GACjDmH,EAA2BD,EAAU9F,QACvC,SAAC2B,GAAD,OAAcA,EAAS3C,aACzBsC,OAEE1C,EAAMoC,wBAA0B+E,IAChCvG,QAAQwG,IAAI,gBAAiBD,GAC7BD,EACK9F,QAAO,SAAC2B,GAAD,OAAeA,EAAS3C,YAAc2C,EAASzC,cACtDC,SAAQ,SAACwC,GAAD,OAAc,EAAKiE,wBAAwBjE,MACxD,EAAKkE,kBA/DW,EAiFxBnD,WAAa,SAAC9D,GACV,EAAKoF,MAAMoB,MAAMa,mBAAmBrH,GACpC,EAAKiH,iBAnFe,EAsFxBT,MAAQ,WACJ,IAAMc,EAAe,sBAAkB,EAAKlC,MAAM0B,MAA7B,wBAAkD,EAAK1B,MAAMgB,YAClF,OACI,uBAAKlD,UAAWoE,GACX,EAAKlC,MAAMoB,MAAMe,UAAUhC,KAAI,SAACvF,EAAmBwH,GAApB,OAC5B,gBAAC,EAAD,CACI7B,IAAK6B,EACLxH,MAAOA,EACP2D,SAAU,SAAC3D,GAAD,OAAuB,EAAK0D,aAAa1D,IACnD6D,cAAe,SAAC7D,GAAD,OACX,EAAK4D,kBAAkB5D,IAE3BiE,OAAQ,SAACjE,GAAD,OAAuB,EAAK8D,WAAW9D,WAlG3C,EAyGxByH,SAAW,kBACP,uBAAKvE,UAAU,cAAf,uCACwC,2BADxC,6BAGI,2BAHJ,uFAxGA,EAAKkC,MAAQ,CACT0B,MAAO5H,EAAM2F,KACb2B,MAAO,IAAIrH,EAAM,EAAG,EAAG,IACvBiH,WAAYnH,EAAWoH,SALP,EAD5B,oEAoE4BrG,GAA0B,IAAD,OAC7C,IAAIA,EAAMM,WAAV,CAD6C,IAGrCkG,EAAU7G,KAAKyF,MAAfoB,MAGR,GAFAA,EAAMhG,YAAYR,GAEkB,IAAhCA,EAAMoC,sBACYoE,EAAM1D,oBAAoB9C,GAClCO,SAAQ,SAACwC,GACf,EAAKiE,wBAAwBjE,SA7E7C,+BAoHc,IAAD,EACyBpD,KAAKyF,MAA3BgB,EADH,EACGA,WAAYI,EADf,EACeA,MAEpB,OACI,2BAAStD,UAAU,eACf,gBAAC,EAAD,CAAc+C,oBAAqBtG,KAAKkH,eACxC,gBAAC,EAAD,CAAcL,MAAOA,EAAOJ,WAAYA,IACvCzG,KAAK6G,QACL7G,KAAK8H,cA5HtB,sCAkIQ9H,KAAKsF,SAAS,QAlItB,GAAiCT,aCelBkD,MA7Bf,WACI,OACI,oCACI,yBAAKxE,UAAU,OACX,gCACI,6BAASA,UAAU,QACf,uBACIyE,KAAK,iDACLxC,OAAO,SAFX,0BAOJ,6BAASjC,UAAU,UACf,4CAEJ,6BAASA,UAAU,SACf,uBAAGyE,KAAK,uBAAuBxC,OAAO,SAAtC,wBAMR,kBAAC,EAAD,SCfIyC,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCZZC,IAAS7D,OACL,kBAAC,IAAM8D,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SD0HpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAACC,GACHA,EAAaC,gBAEhBC,OAAM,SAACC,GACJhI,QAAQgI,MAAMA,EAAMC,c","file":"static/js/main.3233d574.chunk.js","sourcesContent":["export enum GameStatus {\n    Playing = 'playing',\n    Won = 'won',\n    Lost = 'lost',\n}\n","export enum Level {\r\n    Easy = 'easy',\r\n    Medium = 'medium',\r\n    Hard = 'hard',\r\n}\r\n","import { FieldModel } from '../types/field.interface';\nimport { Position } from '../types/position.interface';\n\nexport class Board {\n    private readonly _fields: FieldModel[];\n    private readonly _minePositions: Position[];\n\n    private _numberOfFlags = 0;\n    private _numberOfRevealedFields = 0;\n\n    constructor(\n        public readonly numberOfColumns: number,\n        public readonly numberOfRows: number,\n        public readonly numberOfMines: number = 0\n    ) {\n        this._fields = [];\n        this._minePositions = [];\n        this.initializeBlankFields();\n        this.rollMinePositions();\n        this.distributeMines();\n        this.calculateNumberOfMineNeighbors();\n    }\n\n    get numberOfFields(): number {\n        return this.numberOfRows * this.numberOfColumns;\n    }\n\n    get numberOfFieldsToReveal(): number {\n        return this.numberOfFields - this.numberOfMines - this._numberOfRevealedFields;\n    }\n\n    get numberOfFlags(): number {\n        return this._numberOfFlags;\n    }\n\n    get numberOfMinesLeft(): number {\n        return this.numberOfMines - this._numberOfFlags;\n    }\n\n    get allFields(): FieldModel[] {\n        return this._fields;\n    }\n\n    get allMinePositions(): Position[] {\n        return this._minePositions;\n    }\n\n    toggleFlagForField(field: FieldModel): void {\n        const boardField = this.getFieldByPosition(field.position);\n        if (!boardField) return;\n\n        boardField.isFlagged = !boardField.isFlagged;\n        this._numberOfFlags = boardField.isFlagged\n            ? this.numberOfFlags + 1\n            : this.numberOfFlags - 1;\n    }\n\n    revealField(field: FieldModel): void {\n        const boardField = this.getFieldByPosition(field.position);\n        if (boardField) boardField.isRevealed = true;\n        this._numberOfRevealedFields++;\n    }\n\n    revealAllFields(): void {\n        this._fields.forEach((field) => {\n            this.revealField(field);\n        });\n    }\n\n    getFieldByPosition(position: Position): FieldModel | undefined {\n        const positionIsInvalid =\n            position.x >= this.numberOfColumns ||\n            position.x < 0 ||\n            position.y >= this.numberOfRows ||\n            position.y < 0;\n\n        if (positionIsInvalid) {\n            console.warn('Tried to get field by invalid position.', position);\n            return undefined;\n        }\n\n        return this._fields.find(\n            (field) => field.position.x === position.x && field.position.y === position.y\n        );\n    }\n\n    getNeighborsOfField(field: FieldModel): FieldModel[] {\n        const centerX = field.position.x;\n        const centerY = field.position.y;\n        const centerIsNotAtTopBoundary = centerY - 1 >= 0;\n        const centerIsNotAtLeftBoundary = centerX - 1 >= 0;\n        const centerIsNotAtRightBoundary = centerX + 1 < this.numberOfColumns;\n        const centerIsNotAtBottomBoundary = centerY - 1 < this.numberOfRows;\n\n        return this._fields.filter((potentialNeighborField) => {\n            const x = potentialNeighborField.position.x;\n            const y = potentialNeighborField.position.y;\n            let isTopLeft = false;\n            let isTop = false;\n            let isTopRight = false;\n            let isLeft = false;\n            let isRight = false;\n            let isBottomLeft = false;\n            let isBottom = false;\n            let isBottomRight = false;\n\n            if (centerIsNotAtTopBoundary && centerIsNotAtLeftBoundary) {\n                isTopLeft = x === centerX - 1 && y === centerY - 1;\n            }\n            if (centerIsNotAtTopBoundary) {\n                isTop = x === centerX && y === centerY - 1;\n            }\n            if (centerIsNotAtTopBoundary && centerIsNotAtRightBoundary) {\n                isTopRight = x === centerX + 1 && y === centerY - 1;\n            }\n            if (centerIsNotAtLeftBoundary) {\n                isLeft = x === centerX - 1 && y === centerY;\n            }\n            if (centerIsNotAtRightBoundary) {\n                isRight = x === centerX + 1 && y === centerY;\n            }\n            if (centerIsNotAtBottomBoundary && centerIsNotAtLeftBoundary) {\n                isBottomLeft = x === centerX - 1 && y === centerY + 1;\n            }\n            if (centerIsNotAtBottomBoundary) {\n                isBottom = x === centerX && y === centerY + 1;\n            }\n            if (centerIsNotAtBottomBoundary && centerIsNotAtRightBoundary) {\n                isBottomRight = x === centerX + 1 && y === centerY + 1;\n            }\n\n            return (\n                isTopLeft ||\n                isTop ||\n                isTopRight ||\n                isLeft ||\n                isRight ||\n                isBottomLeft ||\n                isBottom ||\n                isBottomRight\n            );\n        });\n    }\n\n    private initializeBlankFields() {\n        for (let i = 0; i < this.numberOfFields; i++) {\n            this._fields.push({\n                hasMine: false,\n                isRevealed: false,\n                isFlagged: false,\n                position: {\n                    x: i % this.numberOfColumns,\n                    y: Math.floor(i / this.numberOfColumns),\n                },\n                numberOfMineNeighbors: 0,\n            } as FieldModel);\n        }\n    }\n\n    private rollMinePositions() {\n        while (this._minePositions.length < this.numberOfMines) {\n            const randomColumn = Math.floor(Math.random() * this.numberOfColumns);\n            const randomRow = Math.floor(Math.random() * this.numberOfRows);\n            const position: Position = {\n                x: randomColumn,\n                y: randomRow,\n            };\n            const positionAlreadyExists = this._minePositions.some(\n                (pos) => pos.x === randomColumn && pos.y === randomRow\n            );\n\n            if (!positionAlreadyExists) {\n                this._minePositions.push(position);\n            }\n        }\n    }\n\n    private distributeMines() {\n        this._minePositions.forEach((minePosition) => {\n            const field = this.getFieldByPosition(minePosition);\n\n            if (field !== undefined) {\n                field.hasMine = true;\n            } else {\n                console.warn('Tried to set a mine on a undefined field!');\n            }\n        });\n    }\n\n    private calculateNumberOfMineNeighbors() {\n        this._fields.forEach((field) => {\n            field.numberOfMineNeighbors = this.getNumberOfMineNeighborsForField(field);\n        });\n    }\n\n    private getNumberOfMineNeighborsForField(field: FieldModel) {\n        const neighbors = this.getNeighborsOfField(field);\n        const neighborsWithMine = neighbors.filter((neighbor) => neighbor.hasMine);\n        return neighborsWithMine.length;\n    }\n}\n","import * as React from 'react';\n\ninterface RevealedFieldProps {\n    neighborCount: number;\n}\n\nexport const NumberField = (props: RevealedFieldProps) => (\n    <div className={`revealed neighbor-count-${props.neighborCount}`}>\n        <span>{props.neighborCount}</span>\n    </div>\n);\n","import * as React from 'react';\n\nexport const UntouchedField = () => {\n    return <div className=\"untouched\" />;\n};\n","import * as React from 'react';\n\nexport const MineField = () => (\n    <div className=\"revealed has-mine\">\n        <span role=\"img\" aria-label=\"mine\">\n            💣\n        </span>\n    </div>\n);\n","import * as React from 'react';\n\nexport const FlagField = () => {\n    return (\n        <div className=\"flagged\">\n            <span role=\"img\" aria-label=\"flag\">\n                🚩\n            </span>\n        </div>\n    );\n};\n","import * as React from 'react';\nimport '../../styles/minesweeper.scss';\nimport { FieldModel } from '../../types/field.interface';\nimport { NumberField } from './NumberField';\nimport { UntouchedField } from './UntouchedField';\nimport { MineField } from './MineField';\nimport { FlagField } from './FlagField';\n\ninterface FieldProps {\n    field: FieldModel;\n    onReveal: any;\n    onFlag: any;\n    onMultiReveal: any;\n}\n\nexport class Field extends React.Component<FieldProps, any> {\n    handleReveal = () => {\n        const { field, onReveal } = this.props;\n        if (!field.isRevealed && !field.isFlagged) onReveal(field);\n    };\n\n    handleMultiReveal = () => {\n        const { field, onMultiReveal } = this.props;\n        if (field.isRevealed) onMultiReveal(field);\n    };\n\n    handleFlag = (event: React.MouseEvent<HTMLDivElement>): void => {\n        event.preventDefault();\n        const { field, onFlag } = this.props;\n        if (!field.isRevealed) onFlag(field);\n    };\n\n    revealedField = () =>\n        this.props.field.hasMine ? (\n            <MineField />\n        ) : (\n            <NumberField neighborCount={this.props.field.numberOfMineNeighbors} />\n        );\n\n    unrevealedField = () =>\n        this.props.field.isFlagged ? <FlagField /> : <UntouchedField />;\n\n    field = () =>\n        this.props.field.isRevealed ? this.revealedField() : this.unrevealedField();\n\n    render = () => (\n        <div\n            className=\"field\"\n            onClick={this.handleReveal}\n            onContextMenu={this.handleFlag}\n            onDoubleClick={this.handleMultiReveal}\n        >\n            {this.field()}\n        </div>\n    );\n}\n","import * as React from 'react';\nimport { Button, ButtonGroup, ToggleButton } from 'react-bootstrap';\nimport { Level } from '../types/level.enum';\n\ninterface LevelChooserProps {\n    onStartNewGameClick: (level: Level) => void;\n}\n\ninterface LevelChooserState {\n    currentlySelectedLevel: Level;\n}\n\ninterface LevelRadioOption {\n    name: string;\n    value: Level;\n}\n\nexport class LevelChooser extends React.Component<LevelChooserProps, LevelChooserState> {\n    readonly radioOptions: LevelRadioOption[] = [\n        { name: 'Easy', value: Level.Easy },\n        { name: 'Medium', value: Level.Medium },\n        { name: 'Hard', value: Level.Hard },\n    ];\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            currentlySelectedLevel: Level.Easy,\n        };\n    }\n\n    handleChangeSelection = (event: any) => {\n        this.setState({ currentlySelectedLevel: event.target.value });\n    };\n\n    render() {\n        return (\n            <div className=\"level-chooser\">\n                <ButtonGroup toggle>\n                    {this.radioOptions.map((radio: LevelRadioOption, idx) => (\n                        <ToggleButton\n                            key={idx}\n                            type=\"radio\"\n                            variant=\"secondary\"\n                            name=\"radio\"\n                            value={radio.value}\n                            checked={radio.value === this.state.currentlySelectedLevel}\n                            onFocus={this.handleChangeSelection}\n                        >\n                            {radio.name}\n                        </ToggleButton>\n                    ))}\n                </ButtonGroup>\n\n                <Button\n                    variant=\"primary\"\n                    onClick={() =>\n                        this.props.onStartNewGameClick(this.state.currentlySelectedLevel)\n                    }\n                >\n                    Start new game!\n                </Button>\n            </div>\n        );\n    }\n}\n","import * as React from 'react';\nimport { Board } from './board.class';\nimport { Badge } from 'react-bootstrap';\nimport { GameStatus } from '../types/game-status.enum';\n\ninterface StatsDisplayProps {\n    board: Board;\n    gameStatus: GameStatus;\n}\n\nexport class StatsDisplay extends React.Component<StatsDisplayProps, any> {\n    smiley = () => {\n        switch (this.props.gameStatus) {\n            case GameStatus.Playing:\n                return '🤔';\n            case GameStatus.Won:\n                return '😎';\n            case GameStatus.Lost:\n                return '😵';\n        }\n    };\n    render() {\n        const { board, gameStatus } = this.props;\n        return (\n            <>\n                <div className=\"smiley\">\n                    <span role=\"img\" aria-label=\"smiley\">\n                        {this.smiley()}\n                    </span>\n                </div>\n                <div className=\"stats-display\">\n                    <Badge className=\"stat mr-3\" variant=\"danger\">\n                        <span role=\"img\" aria-label=\"mine\">\n                            💣\n                        </span>\n                        &nbsp;\n                        <span>\n                            {gameStatus === GameStatus.Won ? 0 : board.numberOfMinesLeft}\n                        </span>\n                    </Badge>\n                    <Badge className=\"stat mr-3\" variant=\"secondary\">\n                        <span role=\"img\" aria-label=\"finger\">\n                            👆\n                        </span>\n                        &nbsp;\n                        <span>\n                            {gameStatus === GameStatus.Playing\n                                ? board.numberOfFieldsToReveal\n                                : 0}\n                        </span>\n                    </Badge>\n                    <Badge className=\"stat\" variant=\"secondary\">\n                        <span role=\"img\" aria-label=\"flag\">\n                            🚩\n                        </span>\n                        &nbsp;<span>{board.numberOfFlags}</span>\n                    </Badge>\n                </div>\n            </>\n        );\n    }\n}\n","import * as React from 'react';\nimport '../styles/minesweeper.scss';\nimport { FieldModel } from '../types/field.interface';\nimport { GameStatus } from '../types/game-status.enum';\nimport { Level } from '../types/level.enum';\nimport { Board } from './board.class';\nimport { Field } from './fields/Field';\nimport { LevelChooser } from './LevelChooser';\nimport { StatsDisplay } from './StatsDisplay';\n\ninterface MinesweeperProps {}\n\ninterface MinesweeperState {\n    level: Level;\n    board: Board;\n    gameStatus: GameStatus;\n}\n\nexport class Minesweeper extends React.Component<MinesweeperProps, MinesweeperState> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            level: Level.Easy,\n            board: new Board(9, 9, 10),\n            gameStatus: GameStatus.Playing,\n        };\n    }\n\n    startNewGame = (level: Level) => {\n        switch (level) {\n            case Level.Easy:\n                this.setState({\n                    board: new Board(9, 9, 10),\n                });\n                break;\n            case Level.Medium:\n                this.setState({\n                    board: new Board(16, 16, 40),\n                });\n                break;\n            case Level.Hard:\n                this.setState({\n                    board: new Board(30, 16, 100),\n                });\n                break;\n            default:\n                break;\n        }\n        this.setState({\n            level: level,\n            gameStatus: GameStatus.Playing,\n        });\n    };\n\n    handleReveal = (field: FieldModel) => {\n        const { board } = this.state;\n\n        if (field.hasMine) {\n            board.revealAllFields();\n            this.setState({ gameStatus: GameStatus.Lost });\n        } else {\n            this.revealFieldsRecursively(field);\n        }\n\n        if (board.numberOfFieldsToReveal === 0) {\n            board.revealAllFields();\n            this.setState({ gameStatus: GameStatus.Won });\n        }\n        this.rerenderBoard();\n    };\n\n    handleMultiReveal = (field: FieldModel) => {\n        const neighbors = this.state.board.getNeighborsOfField(field);\n        const numberOfFlaggedNeighbors = neighbors.filter(\n            (neighbor) => neighbor.isFlagged\n        ).length;\n\n        if (field.numberOfMineNeighbors === numberOfFlaggedNeighbors) {\n            console.log('Multi-Reveal!', numberOfFlaggedNeighbors);\n            neighbors\n                .filter((neighbor) => !neighbor.isFlagged && !neighbor.isRevealed)\n                .forEach((neighbor) => this.revealFieldsRecursively(neighbor));\n            this.rerenderBoard();\n        }\n    };\n\n    revealFieldsRecursively(field: FieldModel): void {\n        if (field.isRevealed) return;\n\n        const { board } = this.state;\n        board.revealField(field);\n\n        if (field.numberOfMineNeighbors === 0) {\n            const neighbors = board.getNeighborsOfField(field);\n            neighbors.forEach((neighbor) => {\n                this.revealFieldsRecursively(neighbor);\n            });\n        }\n    }\n\n    handleFlag = (field: FieldModel) => {\n        this.state.board.toggleFlagForField(field);\n        this.rerenderBoard();\n    };\n\n    board = () => {\n        const boardCssClasses = `board level-${this.state.level} game-status-${this.state.gameStatus}`;\n        return (\n            <div className={boardCssClasses}>\n                {this.state.board.allFields.map((field: FieldModel, index: number) => (\n                    <Field\n                        key={index}\n                        field={field}\n                        onReveal={(field: FieldModel) => this.handleReveal(field)}\n                        onMultiReveal={(field: FieldModel) =>\n                            this.handleMultiReveal(field)\n                        }\n                        onFlag={(field: FieldModel) => this.handleFlag(field)}\n                    />\n                ))}\n            </div>\n        );\n    };\n\n    howToUse = () => (\n        <div className=\"how-to-use\">\n            Left-click on a field to reveal it. <br />\n            Right-click to set a flag.\n            <br />\n            Double-click on a revealed field to multi-reveal all neighbors (if flags are\n            set).\n        </div>\n    );\n\n    render() {\n        const { gameStatus, board } = this.state;\n\n        return (\n            <section className=\"minesweeper\">\n                <LevelChooser onStartNewGameClick={this.startNewGame} />\n                <StatsDisplay board={board} gameStatus={gameStatus} />\n                {this.board()}\n                {this.howToUse()}\n            </section>\n        );\n    }\n\n    private rerenderBoard() {\n        this.setState({});\n    }\n}\n","import React from 'react';\r\nimport './styles/App.scss';\r\nimport { Minesweeper } from './components/Minesweeper';\r\n\r\nfunction App() {\r\n    return (\r\n        <>\r\n            <div className=\"App\">\r\n                <header>\r\n                    <section className=\"left\">\r\n                        <a\r\n                            href=\"https://github.com/PeterGuntermann/minesweeper\"\r\n                            target=\"blank\"\r\n                        >\r\n                            Source code on GitHub\r\n                        </a>\r\n                    </section>\r\n                    <section className=\"center\">\r\n                        <h1>Minesweeper</h1>\r\n                    </section>\r\n                    <section className=\"right\">\r\n                        <a href=\"https://reactjs.org/\" target=\"blank\">\r\n                            Made with React.JS\r\n                        </a>\r\n                    </section>\r\n                </header>\r\n\r\n                <Minesweeper />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(\r\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n        )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null &&\r\n                    contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}